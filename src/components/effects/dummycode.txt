import { useP5 } from "../../hooks/useP5";

const GalaxyStars = () => {
  const sketch = (p5: any) => {
    let stars: any[] = [];
    const numStars = 300;

    class Star {
      x: number;
      y: number;
      z: number;
      pz: number;
      r: number;

      constructor() {
        this.x = p5.random(-p5.width, p5.width);
        this.y = p5.random(-p5.height, p5.height);
        this.z = p5.random(p5.width);
        this.pz = this.z;
        this.r = p5.random(1, 3);
      }

      update() {
        this.z -= 2;
        if (this.z < 1) {
          this.z = p5.width;
          this.x = p5.random(-p5.width, p5.width);
          this.y = p5.random(-p5.height, p5.height);
          this.pz = this.z;
        }
      }

      show() {
        p5.noStroke();
        const sx = p5.map(this.x / this.z, 0, 1, 0, p5.width / 2);
        const sy = p5.map(this.y / this.z, 0, 1, 0, p5.height / 2);
        const twinkle = p5.random(1) > 0.9 ? 255 : 150;
        p5.fill(twinkle);
        p5.ellipse(sx, sy, this.r, this.r);
      }
    }
    

    p5.setup = () => {
      
      p5.createCanvas(window.innerWidth, window.innerHeight);
      for (let i = 0; i < numStars; i++) {
        stars.push(new Star());
      }
    };

    p5.draw = () => {
      // p5.background(5, 5, 20, 50); 
      // p5.background(0, 0, 0);
      p5.background(8, 4, 16, 80);
      p5.translate(p5.width / 2, p5.height / 2);
      for (let s of stars) {
        s.update();
        s.show();
      }
    };

    p5.windowResized = (event?: UIEvent) => {
      // Only resize if it's a real UIEvent (not a fake or invalid dispatch)
      if (event instanceof UIEvent || event === undefined) {
        p5.resizeCanvas(window.innerWidth, window.innerHeight);
      }
    };
    
  };
  // console.log("GalaxyStars mounted");


  useP5(sketch, "galaxy-stars");

  return <div id="galaxy-stars" className="absolute inset-0 z-[-1]" />;
};

export default GalaxyStars;
